
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 28 15:48:57 BRT 2014
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 28 15:48:57 BRT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\005\000\002\003\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\003\000\002" +
    "\006\007\000\002\006\005\000\002\006\007\000\002\006" +
    "\005\000\002\006\007\000\002\006\005\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\004\005\000" +
    "\002\010\004\000\002\010\004\000\002\010\002\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\013\005\000\002\014\003\000\002\014\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\015\003\000\002\032\005\000\002\032\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\021\005\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\005" +
    "\000\002\023\003\000\002\024\005\000\002\024\003\000" +
    "\002\025\004\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\005\000\002\027\007\000\002\027" +
    "\007\000\002\030\007\000\002\030\011\000\002\031\003" +
    "\000\002\033\006\000\002\033\006\000\002\033\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\020\003\012\004\ufffc\014\014\015\005\016" +
    "\015\017\010\020\007\001\002\000\004\002\203\001\002" +
    "\000\004\024\ufffb\001\002\000\004\004\046\001\002\000" +
    "\004\024\ufff9\001\002\000\004\024\ufff8\001\002\000\004" +
    "\030\043\001\002\000\004\002\uffff\001\002\000\004\024" +
    "\024\001\002\000\004\024\016\001\002\000\004\024\ufffa" +
    "\001\002\000\004\032\017\001\002\000\010\025\022\026" +
    "\021\027\020\001\002\000\004\030\uffee\001\002\000\004" +
    "\030\uffed\001\002\000\004\030\uffef\001\002\000\004\030" +
    "\041\001\002\000\010\030\ufff6\031\026\032\025\001\002" +
    "\000\010\025\032\026\030\027\031\001\002\000\004\024" +
    "\024\001\002\000\004\030\ufff7\001\002\000\006\030\ufff0" +
    "\031\037\001\002\000\006\030\ufff2\031\035\001\002\000" +
    "\006\030\ufff4\031\033\001\002\000\004\024\024\001\002" +
    "\000\004\030\ufff5\001\002\000\004\024\024\001\002\000" +
    "\004\030\ufff3\001\002\000\004\024\024\001\002\000\004" +
    "\030\ufff1\001\002\000\016\004\ufffc\014\014\015\005\016" +
    "\015\017\010\020\007\001\002\000\004\004\ufffe\001\002" +
    "\000\016\004\ufffc\014\014\015\005\016\015\017\010\020" +
    "\007\001\002\000\004\004\ufffd\001\002\000\004\002\001" +
    "\001\002\000\024\004\046\005\uffe9\011\061\013\050\021" +
    "\052\022\063\023\056\024\066\030\054\001\002\000\024" +
    "\004\uffe5\005\uffe5\011\uffe5\013\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\030\uffe5\001\002\000\004\033\176\001\002" +
    "\000\024\004\046\005\uffe9\011\061\013\050\021\052\022" +
    "\063\023\056\024\066\030\054\001\002\000\004\031\173" +
    "\001\002\000\004\031\163\001\002\000\024\004\uffe3\005" +
    "\uffe3\011\uffe3\013\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\030\uffe3\001\002\000\024\004\046\005\uffe9\011\061\013" +
    "\050\021\052\022\063\023\056\024\066\030\054\001\002" +
    "\000\004\031\uffdf\001\002\000\024\004\uffe6\005\uffe6\011" +
    "\uffe6\013\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\030\uffe6" +
    "\001\002\000\004\030\161\001\002\000\004\033\152\001" +
    "\002\000\004\030\151\001\002\000\004\031\uffe0\001\002" +
    "\000\024\004\uffe4\005\uffe4\011\uffe4\013\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\030\uffe4\001\002\000\004\005\150" +
    "\001\002\000\004\032\067\001\002\000\016\010\104\024" +
    "\106\025\076\026\070\027\103\033\071\001\002\000\012" +
    "\006\uffc2\007\uffc2\030\uffc2\034\uffc2\001\002\000\014\010" +
    "\104\024\106\025\076\026\070\033\071\001\002\000\006" +
    "\007\143\030\142\001\002\000\012\006\uffc5\007\uffc5\030" +
    "\uffc5\034\uffc5\001\002\000\012\006\uffc3\007\uffc3\030\uffc3" +
    "\034\uffc3\001\002\000\012\006\140\007\uffc7\030\uffc7\034" +
    "\uffc7\001\002\000\040\006\uffd2\007\uffd2\030\uffd2\031\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\001\002\000\012" +
    "\006\uffc1\007\uffc1\030\uffc1\034\uffc1\001\002\000\040\006" +
    "\uffd3\007\uffd3\030\uffd3\031\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\001\002\000\024\030\137\035\114\036\116" +
    "\041\125\042\132\043\130\044\131\045\126\046\124\001" +
    "\002\000\004\030\136\001\002\000\010\030\uffd9\031\uffd9" +
    "\035\134\001\002\000\012\024\106\025\076\026\070\033" +
    "\071\001\002\000\040\006\uffd6\007\uffd6\030\uffd6\031\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\107\040\110\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\001\002\000\040" +
    "\006\uffd1\007\uffd1\030\uffd1\031\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\001\002\000\010\024\106\025\076\033" +
    "\112\001\002\000\010\024\106\025\076\033\112\001\002" +
    "\000\040\006\uffd4\007\uffd4\030\uffd4\031\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\001\002\000\010\024\106\025" +
    "\076\033\112\001\002\000\010\034\115\035\114\036\116" +
    "\001\002\000\010\024\106\025\076\033\112\001\002\000" +
    "\040\006\uffd0\007\uffd0\030\uffd0\031\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\001\002\000\010\024\106\025\076" +
    "\033\112\001\002\000\040\006\uffd7\007\uffd7\030\uffd7\031" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\107\040\110\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\001\002\000" +
    "\040\006\uffd8\007\uffd8\030\uffd8\031\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\107\040\110\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\001\002\000\040\006\uffd5\007\uffd5" +
    "\030\uffd5\031\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\001\002\000\012\006\uffc4\007\uffc4\030\uffc4\034\uffc4\001" +
    "\002\000\022\035\114\036\116\041\125\042\132\043\130" +
    "\044\131\045\126\046\124\001\002\000\010\024\uffc9\025" +
    "\uffc9\033\uffc9\001\002\000\010\024\uffce\025\uffce\033\uffce" +
    "\001\002\000\010\024\uffca\025\uffca\033\uffca\001\002\000" +
    "\010\024\106\025\076\033\112\001\002\000\010\024\uffcc" +
    "\025\uffcc\033\uffcc\001\002\000\010\024\uffcb\025\uffcb\033" +
    "\uffcb\001\002\000\010\024\uffcd\025\uffcd\033\uffcd\001\002" +
    "\000\016\006\uffcf\007\uffcf\030\uffcf\034\uffcf\035\114\036" +
    "\116\001\002\000\004\027\103\001\002\000\006\030\uffda" +
    "\031\uffda\001\002\000\024\004\uffba\005\uffba\011\uffba\013" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\030\uffba\001\002" +
    "\000\024\004\uffb8\005\uffb8\011\uffb8\013\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\030\uffb8\001\002\000\014\010\104" +
    "\024\106\025\076\026\070\033\071\001\002\000\012\006" +
    "\uffc6\007\uffc6\030\uffc6\034\uffc6\001\002\000\024\004\uffb9" +
    "\005\uffb9\011\uffb9\013\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\030\uffb9\001\002\000\014\010\104\024\106\025\076" +
    "\026\070\033\071\001\002\000\012\006\140\007\uffc8\030" +
    "\uffc8\034\uffc8\001\002\000\006\007\143\034\147\001\002" +
    "\000\024\034\115\035\114\036\116\041\125\042\132\043" +
    "\130\044\131\045\126\046\124\001\002\000\012\006\uffc0" +
    "\007\uffc0\030\uffc0\034\uffc0\001\002\000\030\002\uffec\004" +
    "\uffec\005\uffec\011\uffec\012\uffec\013\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\030\uffec\001\002\000\024\004\uffe7\005" +
    "\uffe7\011\uffe7\013\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\030\uffe7\001\002\000\014\010\104\024\106\025\076\026" +
    "\070\033\071\001\002\000\006\007\143\034\154\001\002" +
    "\000\004\004\046\001\002\000\026\004\uffbd\005\uffbd\011" +
    "\uffbd\012\157\013\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\030\uffbd\001\002\000\026\004\uffbb\005\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\030\uffbb" +
    "\001\002\000\004\004\046\001\002\000\024\004\uffbc\005" +
    "\uffbc\011\uffbc\013\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\030\uffbc\001\002\000\024\004\uffe8\005\uffe8\011\uffe8\013" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\030\uffe8\001\002" +
    "\000\004\005\uffeb\001\002\000\012\024\106\025\076\027" +
    "\103\033\112\001\002\000\012\030\uffdc\031\171\035\114" +
    "\036\116\001\002\000\006\030\uffdb\031\167\001\002\000" +
    "\004\030\uffe1\001\002\000\012\024\106\025\076\027\103" +
    "\033\112\001\002\000\004\030\uffdd\001\002\000\012\024" +
    "\106\025\076\027\103\033\112\001\002\000\004\030\uffde" +
    "\001\002\000\004\024\174\001\002\000\004\030\uffe2\001" +
    "\002\000\004\005\uffea\001\002\000\014\010\104\024\106" +
    "\025\076\026\070\033\071\001\002\000\006\007\143\034" +
    "\200\001\002\000\022\004\046\011\061\013\050\021\052" +
    "\022\063\023\056\024\066\030\054\001\002\000\024\004" +
    "\uffbe\005\uffbe\011\uffbe\013\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\030\uffbe\001\002\000\024\004\uffbf\005\uffbf\011" +
    "\uffbf\013\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\030\uffbf" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\012\002\003\003\005\005\012\007\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\033\001" +
    "\001\000\002\001\001\000\004\006\035\001\001\000\002" +
    "\001\001\000\004\006\037\001\001\000\002\001\001\000" +
    "\010\003\041\005\012\007\010\001\001\000\002\001\001" +
    "\000\010\003\043\005\012\007\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\050\010\064\011\054" +
    "\012\057\013\061\014\052\027\056\030\046\033\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\050" +
    "\010\174\011\054\012\057\013\061\014\052\027\056\030" +
    "\046\033\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\050\010\161\011\054\012" +
    "\057\013\061\014\052\027\056\030\046\033\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\100\017\104\020\077\021\076\023\071\024\074\025\072" +
    "\026\073\032\101\001\001\000\002\001\001\000\022\016" +
    "\145\017\104\020\077\021\076\023\144\024\074\025\072" +
    "\026\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\122\017\104" +
    "\020\077\021\076\026\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\120\001\001\000\004\020\110" +
    "\001\001\000\002\001\001\000\010\016\112\017\104\020" +
    "\077\001\001\000\002\001\001\000\006\017\117\020\077" +
    "\001\001\000\002\001\001\000\006\017\116\020\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\132" +
    "\017\104\020\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\122\017\104\020\077\021\076\025\140" +
    "\026\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\122\017\104\020\077\021\076\024\143\025\072" +
    "\026\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\122\017\104\020\077\021" +
    "\076\023\152\024\074\025\072\026\073\001\001\000\002" +
    "\001\001\000\006\004\155\031\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\155\031\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\165\016\163\017\104\020\077\032\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\167\016\163\017\104\020\077\032\164\001\001" +
    "\000\002\001\001\000\014\015\171\016\163\017\104\020" +
    "\077\032\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\122\017" +
    "\104\020\077\021\076\023\176\024\074\025\072\026\073" +
    "\001\001\000\002\001\001\000\022\004\200\011\201\012" +
    "\057\013\061\014\052\027\056\030\046\033\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
		new parser(new Yylex(System.in)).parse();
	}
	public void syntax_error(Symbol s){
		report_error("Erros Sintaticos. Linha: " + (s.right + 1) +
		" Coluna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // attr_expr ::= IDENTIFICADOR ATR expr_mat PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // attr_expr ::= IDENTIFICADOR ATR expr_logica PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // attr_expr ::= IDENTIFICADOR ATR str_expr PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_afirmacao ::= bloco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_afirmacao",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if ::= IF A_PARENTESE expr_logica F_PARENTESE if_afirmacao ELSE if_afirmacao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if ::= IF A_PARENTESE expr_logica F_PARENTESE if_afirmacao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while ::= WHILE A_PARENTESE expr_logica F_PARENTESE bloco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // while ::= WHILE A_PARENTESE expr_logica F_PARENTESE comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term_logico1 ::= A_PARENTESE expr_logica F_PARENTESE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_logico1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term_logico1 ::= expr_relac 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_logico1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term_logico1 ::= LIT_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_logico1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term_logico2 ::= term_logico1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_logico2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term_logico2 ::= NOT term_logico1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_logico2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term_logico ::= term_logico2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_logico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term_logico ::= term_logico AND term_logico2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_logico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_logica ::= term_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_logica ::= expr_logica OR term_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relac_op ::= MAIOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relac_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relac_op ::= MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relac_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relac_op ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relac_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relac_op ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relac_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relac_op ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relac_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relac_op ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relac_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_relac ::= expr_mat relac_op expr_mat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relac",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term_mat ::= A_PARENTESE expr_mat F_PARENTESE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_mat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term_mat ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_mat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term_mat ::= LIT_INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_mat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fator_mat ::= term_mat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator_mat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fator_mat ::= fator_mat DIVI term_mat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator_mat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fator_mat ::= fator_mat MULT term_mat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator_mat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_mat ::= fator_mat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_mat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_mat ::= expr_mat MENOS fator_mat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_mat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_mat ::= expr_mat MAIS fator_mat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_mat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // str_expr ::= LIT_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // str_expr ::= LIT_STRING MAIS str_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // saida_expr ::= str_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("saida_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // saida_expr ::= expr_mat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("saida_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // saida_expr ::= str_expr VIRGULA saida_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("saida_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // saida_expr ::= expr_mat VIRGULA saida_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("saida_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // saida_op ::= WRITELN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("saida_op",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // saida_op ::= WRITE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("saida_op",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // saida_comando ::= saida_op VIRGULA saida_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("saida_comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // entrada_comando ::= READLN VIRGULA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrada_comando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando ::= PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= attr_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= saida_comando PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= entrada_comando PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comandos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comandos ::= bloco comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comandos ::= comando comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloco ::= BEGIN comandos END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // const_declaracao ::= FINAL IDENTIFICADOR ATR LIT_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaracao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // const_declaracao ::= FINAL IDENTIFICADOR ATR LIT_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaracao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // const_declaracao ::= FINAL IDENTIFICADOR ATR LIT_INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaracao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_id ::= IDENTIFICADOR ATR LIT_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_id ::= IDENTIFICADOR ATR LIT_BOOLEANO VIRGULA lista_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_id ::= IDENTIFICADOR ATR LIT_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_id ::= IDENTIFICADOR ATR LIT_STRING VIRGULA lista_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_id ::= IDENTIFICADOR ATR LIT_INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_id ::= IDENTIFICADOR ATR LIT_INTEIRO VIRGULA lista_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_id ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_id ::= IDENTIFICADOR VIRGULA lista_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo ::= BYTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracao ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracao ::= const_declaracao PONTO_VIRGULA declaracao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracao ::= tipo lista_id PONTO_VIRGULA declaracao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error 
            {
              Object RESULT =null;
		 System.out.println("Existem erros sintaticos na sentença"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= declaracao bloco 
            {
              Object RESULT =null;
		 System.out.println("Sentença analizada corretamente. Nenhum erro encontrado."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

