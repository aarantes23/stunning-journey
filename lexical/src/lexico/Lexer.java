/* The following code was generated by JFlex 1.6.0 */

package lexico;

import static lexico.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Arthur/Documents/NetBeansProjects/Trabalho_Compilador/src/lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int CODIGO = 4;
  public static final int STRING = 6;
  public static final int END = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\31\1\27\1\26\1\26\1\30\22\0\1\31\1\70\1\33"+
    "\1\36\1\0\1\66\1\67\1\60\1\72\1\72\1\34\1\65\1\72"+
    "\1\10\1\61\1\35\1\1\7\3\1\20\1\2\1\73\1\72\1\64"+
    "\1\63\1\62\1\22\1\0\4\5\1\7\1\13\5\4\1\15\3\4"+
    "\1\11\4\4\1\17\2\4\1\6\2\4\1\72\1\21\1\72\1\70"+
    "\1\4\1\0\1\37\1\24\1\45\1\51\1\43\1\12\1\53\1\47"+
    "\1\50\1\4\1\44\1\14\1\52\1\23\1\41\1\54\1\4\1\42"+
    "\1\46\1\40\1\16\1\32\1\56\1\25\1\57\1\55\1\72\1\71"+
    "\1\72\1\72\6\0\1\26\u1fa2\0\1\26\1\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\2\1\1\2\2\3\1\4\1\5\4\4\1\5"+
    "\1\4\1\1\1\4\1\6\2\5\1\7\14\4\1\2"+
    "\10\5\1\1\2\10\1\11\1\7\1\12\1\3\3\0"+
    "\3\3\1\13\3\4\2\0\4\4\1\0\1\14\1\15"+
    "\15\4\1\16\1\4\1\16\4\4\4\0\1\3\1\0"+
    "\1\13\1\0\4\3\1\13\7\4\3\0\26\4\1\17"+
    "\2\0\33\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\0\0\u012c\0\0"+
    "\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\0\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u09d8\0\u0a14"+
    "\0\u09d8\0\0\0\0\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u03fc\0\u07bc"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\0\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u01e0\0\u1158\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u09d8\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\0\0\u14a0\0\u14dc\0\0"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c"+
    "\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\0\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\74\0\34\6\1\7\37\6\1\10\1\11\2\12\4\13"+
    "\1\14\1\13\1\15\1\13\1\16\1\17\1\20\1\17"+
    "\1\12\1\10\1\21\1\13\1\22\1\13\2\6\1\23"+
    "\1\6\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\13\1\33\1\34\1\13\1\35\1\36\1\13\1\37"+
    "\1\40\1\41\1\42\1\43\1\13\1\44\1\13\1\45"+
    "\1\46\1\47\1\26\1\50\1\51\1\52\1\53\1\26"+
    "\1\54\1\21\1\55\26\56\2\57\1\60\2\56\1\61"+
    "\40\56\26\62\3\0\43\62\35\0\1\63\37\0\1\64"+
    "\1\65\1\64\2\0\1\66\1\67\4\0\1\70\1\71"+
    "\2\72\1\65\4\0\1\66\15\0\1\67\15\0\1\73"+
    "\13\0\3\12\3\0\1\67\4\0\1\70\1\71\2\72"+
    "\1\12\22\0\1\67\15\0\1\73\13\0\7\13\1\0"+
    "\10\13\2\0\3\13\4\0\1\13\4\0\21\13\24\0"+
    "\1\21\51\0\2\21\11\0\7\13\1\0\3\13\1\74"+
    "\4\13\2\0\3\13\4\0\1\13\4\0\2\13\1\75"+
    "\16\13\15\0\7\13\1\0\10\13\2\0\3\13\4\0"+
    "\1\13\4\0\2\13\1\76\16\13\15\0\7\13\1\0"+
    "\10\13\2\0\3\13\4\0\1\13\1\77\3\0\21\13"+
    "\1\100\14\0\7\13\1\0\7\13\1\101\2\0\1\102"+
    "\2\13\4\0\1\13\1\77\3\0\21\13\1\100\14\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\3\13\1\103\15\13\43\0\1\6\45\0\7\13\1\0"+
    "\10\13\2\0\3\13\4\0\1\13\4\0\2\13\1\104"+
    "\16\13\14\0\21\77\1\105\11\77\1\106\40\77\63\0"+
    "\1\21\44\0\1\107\1\30\25\0\1\21\10\0\26\30"+
    "\3\0\43\30\1\0\7\13\1\0\5\13\1\110\2\13"+
    "\2\0\3\13\4\0\1\13\4\0\21\13\15\0\7\13"+
    "\1\0\10\13\2\0\3\13\4\0\1\13\4\0\20\13"+
    "\1\111\15\0\7\13\1\0\10\13\2\0\3\13\4\0"+
    "\1\13\4\0\4\13\1\112\14\13\15\0\7\13\1\0"+
    "\3\13\1\113\4\13\2\0\1\114\1\13\1\115\4\0"+
    "\1\13\4\0\21\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\1\113\1\13\1\116\5\13"+
    "\1\117\10\13\15\0\7\13\1\0\10\13\2\0\3\13"+
    "\4\0\1\13\4\0\1\13\1\120\4\13\1\121\1\13"+
    "\1\122\1\123\5\13\1\124\1\13\15\0\7\13\1\0"+
    "\1\13\1\125\6\13\2\0\1\126\2\13\4\0\1\13"+
    "\4\0\21\13\15\0\7\13\1\0\10\13\2\0\3\13"+
    "\4\0\1\13\4\0\2\13\1\127\1\13\1\130\14\13"+
    "\15\0\7\13\1\0\10\13\2\0\3\13\4\0\1\13"+
    "\4\0\1\131\20\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\2\13\1\110\16\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\3\13\1\132\15\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\10\13\1\133\10\13\14\0"+
    "\21\134\1\135\36\134\1\0\13\134\1\0\3\73\14\0"+
    "\1\73\40\0\1\136\74\0\1\26\1\21\73\0\1\21"+
    "\1\26\1\0\1\21\4\0\1\21\63\0\1\21\1\0"+
    "\1\21\70\0\2\21\73\0\1\21\3\0\1\21\67\0"+
    "\1\21\5\0\1\21\64\0\1\21\11\0\33\137\1\61"+
    "\67\137\1\57\3\137\1\61\40\137\1\0\1\64\1\65"+
    "\1\64\3\0\1\67\4\0\1\70\1\71\2\72\1\65"+
    "\22\0\1\67\15\0\1\73\13\0\3\65\3\0\1\67"+
    "\10\0\1\65\22\0\1\67\15\0\1\73\13\0\3\140"+
    "\1\0\1\140\1\0\1\140\2\0\2\140\4\0\1\140"+
    "\3\0\1\140\12\0\1\140\3\0\1\140\1\0\1\140"+
    "\3\0\1\140\7\0\1\141\13\0\3\142\4\0\1\143"+
    "\7\0\1\142\44\0\1\143\22\0\1\144\1\0\2\145"+
    "\71\0\1\144\2\145\70\0\1\146\1\147\57\0\3\73"+
    "\3\0\1\67\2\0\4\150\2\0\1\73\22\0\1\67"+
    "\31\0\7\13\1\0\10\13\2\0\3\13\4\0\1\13"+
    "\4\0\2\13\1\151\16\13\15\0\7\13\1\0\10\13"+
    "\2\0\3\13\4\0\1\13\4\0\3\13\1\125\15\13"+
    "\15\0\7\13\1\0\10\13\2\0\1\152\2\13\4\0"+
    "\1\13\4\0\21\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\1\77\3\0\21\13\15\0\7\13"+
    "\1\0\10\13\2\0\3\13\4\0\1\13\4\0\7\13"+
    "\1\153\1\13\1\154\7\13\15\0\7\13\1\0\10\13"+
    "\2\0\3\13\4\0\1\13\4\0\4\13\1\155\14\13"+
    "\15\0\7\13\1\0\3\13\1\156\4\13\2\0\3\13"+
    "\4\0\1\13\4\0\11\13\1\157\7\13\15\0\1\77"+
    "\1\0\1\77\6\0\1\77\6\0\4\77\1\160\4\0"+
    "\2\77\3\0\2\77\1\0\1\77\15\0\1\77\30\0"+
    "\1\161\1\162\1\161\6\0\5\106\1\77\41\0\7\13"+
    "\1\0\10\13\2\0\3\13\4\0\1\13\4\0\1\13"+
    "\1\163\17\13\15\0\7\13\1\0\10\13\2\0\3\13"+
    "\4\0\1\13\4\0\15\13\1\164\3\13\15\0\7\13"+
    "\1\0\10\13\2\0\3\13\4\0\1\13\4\0\1\13"+
    "\1\165\5\13\1\166\4\13\1\167\4\13\15\0\7\13"+
    "\1\0\10\13\2\0\3\13\4\0\1\13\4\0\7\13"+
    "\1\170\11\13\15\0\7\13\1\0\5\13\1\171\2\13"+
    "\2\0\3\13\4\0\1\13\4\0\21\13\15\0\7\13"+
    "\1\0\10\13\2\0\3\13\4\0\1\13\4\0\1\13"+
    "\1\172\17\13\15\0\7\13\1\0\10\13\2\0\1\173"+
    "\2\13\4\0\1\13\4\0\21\13\15\0\7\13\1\0"+
    "\10\13\2\0\3\13\4\0\1\13\4\0\1\75\20\13"+
    "\15\0\7\13\1\0\10\13\2\0\3\13\4\0\1\13"+
    "\4\0\1\174\2\13\1\175\15\13\15\0\7\13\1\0"+
    "\10\13\2\0\3\13\4\0\1\13\4\0\1\176\20\13"+
    "\15\0\7\13\1\0\10\13\2\0\3\13\4\0\1\13"+
    "\4\0\2\13\1\177\16\13\15\0\7\13\1\0\10\13"+
    "\2\0\3\13\4\0\1\13\4\0\14\13\1\200\1\13"+
    "\1\201\2\13\15\0\7\13\1\0\10\13\2\0\3\13"+
    "\4\0\1\13\4\0\11\13\1\202\7\13\15\0\7\13"+
    "\1\0\3\13\1\203\4\13\2\0\3\13\4\0\1\13"+
    "\4\0\1\13\1\125\17\13\15\0\7\13\1\0\5\13"+
    "\1\204\2\13\2\0\3\13\4\0\1\13\4\0\21\13"+
    "\15\0\7\13\1\0\1\13\1\205\6\13\2\0\3\13"+
    "\4\0\1\13\4\0\21\13\15\0\7\13\1\0\10\13"+
    "\2\0\3\13\4\0\1\13\4\0\11\13\1\206\7\13"+
    "\15\0\7\13\1\0\10\13\2\0\3\13\4\0\1\13"+
    "\4\0\11\13\1\207\7\13\15\0\7\13\1\0\10\13"+
    "\2\0\3\13\4\0\1\13\4\0\11\13\1\210\7\13"+
    "\14\0\21\134\1\135\36\134\1\211\13\134\1\0\1\134"+
    "\1\0\1\134\6\0\1\134\6\0\4\134\1\212\4\0"+
    "\2\134\3\0\2\134\1\0\1\134\15\0\1\134\74\0"+
    "\1\21\13\0\3\140\1\0\1\140\1\0\1\140\1\0"+
    "\1\67\2\140\1\70\1\71\2\72\1\140\3\0\1\140"+
    "\12\0\1\140\3\0\1\140\1\0\1\140\3\0\1\140"+
    "\2\0\1\67\4\0\1\213\13\0\3\213\1\0\1\213"+
    "\1\0\1\213\2\0\2\213\4\0\1\213\3\0\1\213"+
    "\12\0\1\213\3\0\1\213\1\0\1\213\3\0\1\213"+
    "\23\0\3\142\6\0\4\150\2\0\1\142\54\0\3\142"+
    "\14\0\1\142\71\0\2\145\70\0\1\145\74\0\1\145"+
    "\57\0\7\13\1\0\10\13\2\0\3\13\4\0\1\13"+
    "\4\0\1\214\20\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\14\13\1\125\4\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\11\13\1\215\7\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\2\13\1\206\16\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\1\216\20\13\15\0\7\13\1\0\10\13\2\0\3\13"+
    "\4\0\1\13\4\0\1\217\20\13\15\0\7\13\1\0"+
    "\10\13\2\0\3\13\4\0\1\13\4\0\12\13\1\125"+
    "\6\13\15\0\3\77\1\0\1\77\1\0\1\77\2\0"+
    "\2\77\4\0\1\77\3\0\1\77\12\0\1\77\3\0"+
    "\1\77\1\0\1\77\3\0\1\77\55\0\1\77\60\0"+
    "\1\161\12\0\1\77\41\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\2\13\1\125\16\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\4\13\1\220\14\13\15\0\7\13\1\0\5\13\1\221"+
    "\2\13\2\0\3\13\4\0\1\13\4\0\21\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\1\13\1\222\17\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\11\13\1\223\7\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\4\13\1\125\14\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\13\13\1\125\5\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\4\13\1\221\14\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\1\13\1\224\5\13\1\214"+
    "\11\13\15\0\7\13\1\0\10\13\2\0\3\13\4\0"+
    "\1\13\4\0\1\13\1\225\17\13\15\0\7\13\1\0"+
    "\5\13\1\226\2\13\2\0\3\13\4\0\1\13\4\0"+
    "\21\13\15\0\7\13\1\0\10\13\2\0\1\227\2\13"+
    "\4\0\1\13\4\0\21\13\15\0\7\13\1\0\10\13"+
    "\2\0\3\13\4\0\1\13\4\0\3\13\1\214\15\13"+
    "\15\0\7\13\1\0\10\13\2\0\1\230\2\13\4\0"+
    "\1\13\4\0\21\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\4\13\1\231\14\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\1\13\1\232\17\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\11\13\1\233\7\13\15\0"+
    "\7\13\1\0\10\13\2\0\1\13\1\210\1\13\4\0"+
    "\1\13\4\0\21\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\1\234\20\13\15\0\7\13"+
    "\1\0\10\13\2\0\1\125\2\13\4\0\1\13\4\0"+
    "\21\13\15\0\7\13\1\0\10\13\2\0\1\235\2\13"+
    "\4\0\1\13\4\0\21\13\15\0\7\13\1\0\3\13"+
    "\1\170\4\13\2\0\3\13\4\0\1\13\4\0\21\13"+
    "\15\0\3\134\1\0\1\134\1\0\1\134\2\0\2\134"+
    "\4\0\1\134\3\0\1\134\12\0\1\134\3\0\1\134"+
    "\1\0\1\134\3\0\1\134\23\0\3\213\1\0\1\213"+
    "\1\0\1\213\1\0\1\67\2\213\4\0\1\213\3\0"+
    "\1\213\12\0\1\213\3\0\1\213\1\0\1\213\3\0"+
    "\1\213\2\0\1\67\20\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\1\13\1\125\17\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\14\13\1\200\4\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\5\13\1\125\13\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\1\13\1\133\17\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\12\13\1\236\6\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\3\13\1\206\15\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\3\13\1\237\15\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\7\13\1\240\11\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\11\13\1\241\7\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\11\13\1\242\7\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\6\13\1\214\12\13\15\0"+
    "\7\13\1\0\1\13\1\125\6\13\2\0\3\13\4\0"+
    "\1\13\4\0\21\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\4\13\1\157\14\13\15\0"+
    "\7\13\1\0\10\13\2\0\3\13\4\0\1\13\4\0"+
    "\2\13\1\227\16\13\15\0\7\13\1\0\10\13\2\0"+
    "\3\13\4\0\1\13\4\0\6\13\1\243\12\13\15\0"+
    "\7\13\1\0\10\13\2\0\1\170\2\13\4\0\1\13"+
    "\4\0\21\13\15\0\7\13\1\0\5\13\1\244\2\13"+
    "\2\0\3\13\4\0\1\13\4\0\21\13\15\0\7\13"+
    "\1\0\10\13\2\0\3\13\4\0\1\13\4\0\1\13"+
    "\1\227\17\13\15\0\7\13\1\0\10\13\2\0\3\13"+
    "\4\0\1\13\4\0\4\13\1\227\14\13\15\0\7\13"+
    "\1\0\10\13\2\0\3\13\4\0\1\13\4\0\11\13"+
    "\1\226\7\13\15\0\7\13\1\0\10\13\2\0\3\13"+
    "\4\0\1\13\4\0\1\13\1\245\17\13\15\0\7\13"+
    "\1\0\10\13\2\0\1\246\2\13\4\0\1\13\4\0"+
    "\21\13\15\0\7\13\1\0\10\13\2\0\3\13\4\0"+
    "\1\13\4\0\6\13\1\125\12\13\15\0\7\13\1\0"+
    "\10\13\2\0\3\13\4\0\1\13\4\0\10\13\1\125"+
    "\10\13\15\0\7\13\1\0\3\13\1\214\4\13\2\0"+
    "\3\13\4\0\1\13\4\0\21\13\15\0\7\13\1\0"+
    "\10\13\2\0\3\13\4\0\1\13\4\0\4\13\1\75"+
    "\14\13\15\0\7\13\1\0\5\13\1\170\2\13\2\0"+
    "\3\13\4\0\1\13\4\0\21\13\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9060];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\4\0\1\11\1\1\1\11\10\1\1\11\40\1"+
    "\2\11\1\1\3\0\7\1\2\0\4\1\1\0\1\1"+
    "\1\11\24\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\7\1\3\0\26\1\1\11\2\0"+
    "\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private String blockString = "";

  private Token token(TokenType type) {
        return new Token(type, yyline+1, yycolumn+1);
  }

  private void initialize(){ yybegin(CODIGO); }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      initialize();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 16: break;
        case 2: 
          { return token(CHAR_INVALIDO_ERRO);
          }
        case 17: break;
        case 3: 
          { return token(INTEGER_LITERAL);
          }
        case 18: break;
        case 4: 
          { return token(IDENTIFICADOR);
          }
        case 19: break;
        case 5: 
          { return token(OPERADOR);
          }
        case 20: break;
        case 6: 
          { yybegin(STRING);
          }
        case 21: break;
        case 7: 
          { /* Ignore */
          }
        case 22: break;
        case 8: 
          { yybegin(CODIGO); return token(STRING_ABERTA_ERRO);
          }
        case 23: break;
        case 9: 
          { yybegin(CODIGO); return token(STRING_LITERAL);
          }
        case 24: break;
        case 10: 
          { yybegin(CODIGO);
          }
        case 25: break;
        case 11: 
          { return token(FLOAT_LITERAL);
          }
        case 26: break;
        case 12: 
          { return token(STRING_LITERAL);
          }
        case 27: break;
        case 13: 
          { yybegin(COMENTARIO);
          }
        case 28: break;
        case 14: 
          { return token(PALAVRA_RESERVADA);
          }
        case 29: break;
        case 15: 
          { return token(CHAR_LITERAL);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case COMENTARIO: {
              yybegin(END); return token(COMENTARIO_ABERTO_ERRO);
            }
            case 167: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
